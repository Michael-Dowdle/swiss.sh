#! /bin/sh

## option arguments
option_color=0
option_error=0

## functions
log_with_color() { echo -e "$(tput setaf $1)$2$(tput sgr0)"; }

log_with_status() { echo -e "$(log_with_color "$1" "$2"):\t$3"; }

log() {
  if test $option_error -eq 0
  then
    log_with_status "$1" "$2" "$3"
  else
    log_with_status "$1" "$2" "$3" >&2
  fi
}

### display usage
usage() {
  log 2 "info" "usage: log [-cehv] [color] log_level message"
  log 2 "info" ""
  log 2 "info" "this script logs a message with a peceded log level"
  log 2 "info" ""
  log 2 "info" "arguments:"
  log 2 "info" "  log_level"
  log 2 "info" "    the log level to use (info, warn, error)"
  log 2 "info" "  message"
  log 2 "info" "    the message to log"
  log 2 "info" ""
  log 2 "info" "options:"
  log 2 "info" "  -c, --color"
  log 2 "info" "    specify the desired color"
  log 2 "info" "  -e, --error"
  log 2 "info" "    print using stderr instead of stdout"
  log 2 "info" "  -h, --help"
  log 2 "info" "    display the usage information"
  log 2 "info" "  -v, --version"
  log 2 "info" "    display the version information"

  exit 0
}

## main
# determine what to list based on provided arguments
while test $# -gt 0
do
  case $1 in
    # normal option processing
    -h | --help)    usage ;;
    -v | --version) usage ;;

    -c | --color) option_color=1 ;;
    -e | --error) option_error=1 ;;

    # special cases
    --)  break ;;
    --*)       ;; # error unknown (long) option $1
    -?)        ;; # error unknown (short) option $1

    # split apart combined short options
    -*)
      split=$1
      shift
      set -- $(echo "$split" | cut -c 2- | sed 's/./-& /g') "$@"
      continue
      ;;

    # done with options
    *) break ;;
  esac

  shift
done

### setup log_color
log_color=2 # green by default

if test $option_color -eq 1
then
  log_color=$1
  shift
else
  case $1 in
    debug) log_color=2 ;;
    error) log_color=1 ;;
    fatal) log_color=1 ;;
    info)  log_color=2 ;;
    trace) log_color=2 ;;
    warn)  log_color=3 ;;
  esac
fi

### log message
case $1 in
  error | fatal)
    log $log_color $1 "$2" >&2 ;;
  *)
    log $log_color $1 "$2" ;;
esac

exit 0

